#!/bin/bash

[ $# -eq 2 ] || exit 0 
PORTS_DIR=$1
OUTPUT_DIR=$2
mkdir -p ${OUTPUT_DIR}

# Get arch for packages in the host
arch=$(uname -m)

find ${PORTS_DIR} -type f -name '*.pkg.*' \
| while read package_line; do \

    package=$(basename ${package_line})
    package_prefix=${package/.pkg.*/}
    
    # get vars from Pkgfile: name, version, release and source
    path=$(dirname ${package_line})
    . ${path}/Pkgfile

    # Filter local files (exclude http, https, and ftp URLs)
    local_files=()
    for item in "${source[@]}"; do
        if [[ ! "$item" =~ ^(https?|ftp):// ]]; then
            local_files+=("$item")
        fi
    done

    # compare and return packages that match the same prefix in Pkgfile
    # so a package will be distributed with his source
    if [[ "${package_prefix}" == "${name}#${version}-${release}" ]]; then

        echo "${package_prefix}.${arch}.cpk ==> ${path}/${package}"

        # Get local files to be copied (exclude http, https, and ftp URLs)
        local_files=(Pkgfile .footprint .signature pre-install post-install README)
        for item in "${source[@]}"; do
            if [[ ! "$item" =~ ^(https?|ftp):// ]]; then
                local_files+=("$item")
            fi
        done

        # Build rsync include options dynamically
        include_opts=()
        for file in "${local_files[@]}"; do
            include_opts+=(--include="$file")
        done

        # Add exclude rule to skip everything else
        include_opts+=(--exclude='*')

        # Create basedir
        basedir="${OUTPUT_DIR}/${name}/${version}-${release}"
        mkdir -p "${basedir}"

        # Copy port sources
        rsync -av "${include_opts[@]}" "${path}"/ "${basedir}"/

        # Copy .pkg file
        rsync -a ${path}/${package} ${basedir}/${package}

        # Create .cpk file
        cd ${OUTPUT_DIR} && \
            tar cvf ${name}#${version}-${release}.${arch}.cpk ${name} && \
            rm -r ${name}
    fi
done
